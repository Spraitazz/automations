I’ve noticed a pattern:

Great developers aren’t just great at writing code…

They’re great at figuring things out.

When solving complex problems, the best devs don’t just jump into the editor and start typing.

They pause.
They analyze.
They design solutions before writing a single line of code.

Most developers skip this step.
They mistake guessing for problem-solving.
They assume more code = more progress.

But here’s the truth?

Writing code without truly understanding the problem is just expensive guessing.

The best engineers don’t rush to build.
They rush to think.

The question isn’t:

"How fast can you write code?"

Instead, it’s:

"How well can you break down the problem before you even touch the keyboard?"

In my latest newsletter, I break down the key difference between great developers and good ones, and how you can start building the skill of figuring things out.

Read it here: